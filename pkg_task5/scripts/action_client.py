#!/usr/bin/env python
'''This module is dedicated for the action client classes
   This action client will communicate to the action server to send/cancel goals
'''

# ROS Node - Action Client - IoT ROS Bridge

import rospy
import actionlib

# Message Class that is used by ROS Actions internally
from pkg_ros_iot_bridge.msg import msgRosIotAction
# Message Class that is used for Goal Messages
from pkg_ros_iot_bridge.msg import msgRosIotGoal
# Message Class that is used for Result Messages
from pkg_ros_iot_bridge.msg import msgRosIotResult
# Message Class that is used by topic /ros_iot_bridge/mqtt/sub
# pylint: disable=pointless-string-statement
# pylint: disable=unused-import
from pkg_ros_iot_bridge.msg import msgMqttSub
# Message Class that is used by ROS Actions internally


class IotRosBridgeActionClient(object):
    '''Class for IotRosBridgeActionClient to send goals to node_action_server_ros_iot_bridge'''
    # Constructor
    def __init__(self):

        # Initialize Action Client
        self._ac = actionlib.ActionClient('/action_ros_iot',
                                          msgRosIotAction)

        # Dictionary to Store all the goal handels
        self._goal_handles = {}

        # Store the MQTT Topic on which to Publish in a variable
        param_config_iot = rospy.get_param('config_pyiot')
        self.config_mqtt_pub_topic = param_config_iot['mqtt']['topic_pub']
        self._config_mqtt_sub_topic = param_config_iot['mqtt']['topic_sub']
        # Wait for Action Server that will use the action - '/action_ros_iot' to start
        self._ac.wait_for_server()
        rospy.loginfo("Action server up, we can send goals.")


    def on_transition(self, goal_handle):
        '''This function is called when there is change of state in Action Client State Machine

           :param goal_handle: This is the goal sent by the action client

        '''
        '''from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.'''

        result = msgRosIotResult()

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        rospy.loginfo("Transition Callback. Client Goal Handle #: " + str(index))
        rospy.loginfo("Comm. State: " + str(goal_handle.get_comm_state()))
        rospy.loginfo("Goal Status: " + str(goal_handle.get_goal_status()))

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Wating for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)

            if result.flag_success:
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))


    def send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message):
        '''This function is used to send Goals to Action Server

           :param arg_protocol: This is the protocol on which user wants action
           :param arg_mode: This defines the mode in which arg_protocol will wor
           :param arg_topic: This is the topic on which the arg_protocol relies.
           :param arg_message: This is the message to be published on the arg_protocol

           :return: The goal_handle is being returned after proceesing it.
           :rtype: class:'instance' object
        '''
        # Create a Goal Message object
        goal = msgRosIotGoal()

        goal.protocol = arg_protocol
        goal.mode = arg_mode
        goal.topic = arg_topic
        goal.message = arg_message

        rospy.loginfo("Send goal.")

        # self.on_transition - It is a function pointer to a function which will be called when
        #                       there is a change of state in the Action Client State Machine
        goal_handle = self._ac.send_goal(goal,
                                         self.on_transition,
                                         None)

        return goal_handle
